@mixin clearfix() {
    &:after {
        content: "" !important;
        display: block !important;
        clear: both !important;
    }
}

// Position an element to cover the entirety of it's parent
@mixin cover($position: absolute) {
    position: $position;
    top: 0;
    left: 0;
    height: 100%;
    width: 100%;
    z-index: 5;
}

// Force an element to have a particular width/height ratio, no matter the width
// Any content you put inside the ratio-boxes needs to be absolutely positioned
@mixin fixed-ratio($ratio: 1) {
    overflow: hidden;
    position: relative;

    // The container's height, as a percentage of the
    // container's width, is set by assigning
    // padding-top to a pseudo-element.
    &::before {
        content: "";
        display: block;
        width: 100%;
        height: 0;
        padding-top: (1 / $ratio) * 100%;
    }

}

// Vertically align an element
// http://zerosixthree.se/vertical-align-anything-with-just-3-lines-of-css/
@mixin vertical-align {
    position: relative;
    top: 50%;
    transform: translateY(-50%);
}

@mixin ghost-vertical-align {
    &::before {
        content: "";
        display: inline-block;
        vertical-align: middle;
        height: 100%;
        width: 0.1px;
    }
}

// Hide text visually, leaving it accesible to screen-readers
@mixin hide-text {
    overflow: hidden;
    white-space: nowrap;
    text-indent: 100%;
}

// Hides html text and replaces it with an image.
// If you use this on an inline element, you will need to change the display to block or inline-block.
@mixin replace-text($img, $density: 1, $inline: false) {
    @include hide-text;

    @if ($inline) {
        background-image: inline($img);
    }
    @else {
        background-image: resolve($img);
    }

    background-repeat: no-repeat;
    background-size: size($img, $density);
    width: width($img, $density);
    height: height($img, $density);
}

// Hide the element entirely, leaving it accessible to screen-readers
@mixin hide-visually {
    border: 0 !important;
    clip: rect(0 0 0 0) !important;
    height: 1px !important;
    margin: -1px !important;
    overflow: hidden !important;
    padding: 0 !important;
    position: absolute !important;
    width: 1px !important;
}

// Set all the link colors at once
@mixin link-colors($normal, $hover: false, $active: false, $visited: false, $focus: false) {
    color: $normal;
    @if $visited {
        &:visited {
            color: $visited;
        }
    }
    @if $focus {
        &:focus {
            color: $focus;
        }
    }
    @if $hover {
        @if $focus {
            &:hover {
                color: $hover;
            }
        }
        @else {
            &:hover,
            &:focus {
                color: $hover;
            }
        }
    }
    @if $active {
        &:active {
            color: $active;
        }
    }
}

// Uppercase with letterspacing
@mixin uppercase($spacing: 0.1em) {
    text-transform: uppercase;
    letter-spacing: $spacing;
}

// Show an ellipsis on text overflow
// Requires inline-block or block for proper styling
@mixin text-overflow {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

// Create a CSS triangle - best applied to empty or generated elements
// https://davidtheclark.github.io/scut/triangle.html
@mixin triangle($direction: right, $size: 0.75em, $ratio: 2, $color: inherit) {
    display: inline-block;
    height: 0;
    width: 0;
    // For improved appearance in some Webkit browsers
    -webkit-transform: rotate(360deg);

    // Set up some variables
    $width: null;
    $height: null;
    $border-widths: null;

    @if type-of($size) == list {
        $width: nth($size, 1);
        $height: nth($size, 2);
    }
    @else {
        $width: $size;
        $height: $size;
    }

    @if ($direction == up) or ($direction == down) {
        // For up and down, width gets two borders but height only one,
        // so divide second border-width value by 2
        $border-widths: $height ($width / $ratio);
    }
    @else if ($direction == right) or ($direction == left) {
        // For right and left, height gets two borders but width only one,
        // so divide first border-width value by $ratio
        $border-widths: ($height / $ratio) $width;
    }
    @else {
        // For right triangles (the rest), both sides get two borders,
        // so divide both by $ratio
        $border-widths: ($height / $ratio) ($width / $ratio);
    }

    border-width: $border-widths;
    border-style: solid;

    // STANDARD TRIANGLES
    @if ($direction == up) or ($direction == down) or ($direction == right) or ($direction == left) {
        border-color: transparent;
        @if $direction == up {
            border-bottom-color: $color;
            border-top-width: 0;
        }
        @else if $direction == right {
            border-left-color: $color;
            border-right-width: 0;
        }
        @else if $direction == down {
            border-top-color: $color;
            border-bottom-width: 0;
        }
        @else if $direction == left {
            border-right-color: $color;
            border-left-width: 0;
        }
    }

    // CORNER TRIANGLES
    @else if ($direction == top-right) or ($direction == top-left) {
        border-top-color: $color;
        border-bottom-color: transparent;
        @if $direction == top-right {
            border-left-color: transparent;
            border-right-color: $color;
        }
        @else if $direction == top-left {
            border-left-color: $color;
            border-right-color: transparent;
        }
    }

    @else if ($direction == bottom-right) or ($direction == bottom-left) {
        border-top-color: transparent;
        border-bottom-color: $color;
        @if $direction == bottom-right {
            border-left-color: transparent;
            border-right-color: $color;
        }
        @else if $direction == bottom-left {
            border-left-color: $color;
            border-right-color: transparent;
        }
    }

}
