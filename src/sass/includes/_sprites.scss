/// Class for <IE9 sprite fallback
$pngSprite: '.no-svg' !default;

%sprite {
    display: inline-block;
    background-image: url(map-get($sprite, svgPath));
    background-size: map-get($sprite, width) map-get($sprite, height);
}
%png-sprite {
     background-image: url(map-get($sprite, pngPath));
}

/// Retrive an attributes value for a specific icon in the sprite map
@function sprite-attr($icon, $attr) {
    $newIcon: map-get($sprites, $icon);
    @if $newIcon == null {
        @warn "Can't find an icon with the name #{$icon}";
    }
    @return map-get($newIcon, $attr);
}

/// Create a map with the specified icon of attributes
@function icon-attr($icon) {
    $attr: (
        width: sprite-attr($icon, width),
        height: sprite-attr($icon, height),
        x: sprite-attr($icon, offsetX),
        y: sprite-attr($icon, offsetY)
    );
    @return $attr;
}

@mixin sprite($icon, $type: all) {
    @if ($type == all) {
        // Shares the backgrounds
        @extend %sprite;
    }

    $iconMap: icon-attr($icon);

    // Outputs dimensions in em
    @if ($type == all or $type == size) {
        width: map-get($iconMap, width);
        height: map-get($iconMap, height);
    }

    // Outputs background position in em
    @if ($type == all or $type == bg) {
        background-position: map-get($iconMap, x) map-get($iconMap, y);
    }

    // Add png fallback
    @include png-sprite($icon, $type);
}

@mixin png-sprite($icon, $type: all) {
    @if $pngSprite {
        $iconMap: icon-attr($icon);

        #{$pngSprite} & {
            @if ($type == all) {
                @extend %png-sprite;
            }
            // Outputs dimensions of icon
            @if ($type == all or $type == size) {
                width: map-get($iconMap, width);
                height: map-get($iconMap, height);
            }
            // Outputs background position
            @if ($type == all or $type == bg) {
                background-position: (map-get($iconMap, x)) (map-get($iconMap, y));
            }
        }
    }
}
